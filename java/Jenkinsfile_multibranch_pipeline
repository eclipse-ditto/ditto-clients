#!groovy
pipeline {
    agent none
    environment {
        // Need to replace the '%2F' used by Jenkins to deal with / in the path (e.g. story/...)
        theBranch = "${env.BRANCH_NAME}".replace("%2F", "-").replace("/", "-")
        theVersion = "0-${theBranch}-SNAPSHOT"
        dittoVersion = "${theVersion}"
        theMvnRepo = "$WORKSPACE/../feature-repository-${theBranch}";
        JAVA_TOOL_OPTIONS = '-Duser.home=/home/jenkins-slave'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    stages {
        stage('Choose Ditto Version to build against') {
            steps {
                script {
                    dittoVersion = askForDittoVersionToUse(dittoVersion)
                    echo "Selected Ditto version: ${dittoVersion}"
                }
            }
        }
        stage('Checkout scm') {
            agent {
                label 'docker-slave'
            }
            steps {
                echo 'Checkout scm'
                checkout scm
            }
        }
        stage('Build') {
            agent {
                docker {
                    args "$DITTO_DOCKER_ARGS"
                    image "$DITTO_DOCKER_IMAGE_MAVEN_JDK_8"
                }
            }
            steps {
                dir("$WORKSPACE/java") {
                    configFileProvider([configFile(fileId: 'mvn-bdc-settings', variable: 'MVN_SETTINGS')]) {
                        sh "mvn -s $MVN_SETTINGS clean deploy javadoc:jar source:jar" +
                                " --batch-mode --errors" +
                                " -DcreateJavadoc=true" +
                                " -Drevision=${theVersion}" +
                                " -Dditto.version=${dittoVersion}" +
                                " -Pditto-java-client"
                    }
                }
            }
        }
        stage ('SonarQube') {
            agent {
                docker {
                    args "$DITTO_DOCKER_ARGS"
                    image "$DITTO_DOCKER_IMAGE_MAVEN_JDK_8"
                }
            }
            steps {
                dir("$WORKSPACE/java") {
                    configFileProvider([configFile(fileId: 'mvn-bdc-settings', variable: 'MVN_SETTINGS')]) {
                        withSonarQubeEnv(installationName: "$SONAR_QUBE_ENV", credentialsId: "$SONAR_QUBE_CREDENTIAL_NAME") {
                            sh "mvn -s $MVN_SETTINGS --batch-mode --errors sonar:sonar -Dsonar.branch.name=${theBranch} " +
                                    " -Drevision=${theVersion}" +
                                    " -Dditto.version=${dittoVersion}"
                        }
                    }
                }
            }
        }
    }
}

def askForDittoVersionToUse(defaultVersion) {
    try {
        timeout(time: 1, unit: 'MINUTES') {
            def branch = input message: 'Which Ditto version to use?',
                    parameters: [string(defaultValue: defaultVersion, description: 'Branch', name: 'DITTO-BRANCH')]
            return branch
        }
    } catch (e) {
        return defaultVersion
    }
}